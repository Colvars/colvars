colvars: ----------------------------------------------------------------------
colvars: Please cite Fiorin et al, Mol Phys 2013:
colvars:  https://dx.doi.org/10.1080/00268976.2013.813594
colvars: in any publication based on this calculation.
colvars: SMP parallelism is enabled; if needed, use "smp off" to override this.
colvars: This version was built with the C++11 standard or higher.
colvars: ----------------------------------------------------------------------
colvars: Reading new configuration from file "test.in":
colvars: # units = "" [default]
colvars: # indexFile = "../Common/da.ndx"
colvars: The following index groups are currently defined:
colvars:   Protein (104 atoms)
colvars:   Protein_noH (51 atoms)
colvars:   Protein_Backbone (40 atoms)
colvars:   Protein_C-alpha (10 atoms)
colvars:   RMSD_atoms (10 atoms)
colvars:   Protein_C-alpha_1_2 (2 atoms)
colvars:   Protein_C-alpha_9_10 (2 atoms)
colvars:   Protein_C-alpha_1 (1 atoms)
colvars:   group1 (4 atoms)
colvars:   Protein_C-alpha_2 (1 atoms)
colvars:   group2 (4 atoms)
colvars:   Protein_C-alpha_3 (1 atoms)
colvars:   group3 (4 atoms)
colvars:   Protein_C-alpha_4 (1 atoms)
colvars:   group4 (4 atoms)
colvars:   Protein_C-alpha_5 (1 atoms)
colvars:   group5 (4 atoms)
colvars:   Protein_C-alpha_6 (1 atoms)
colvars:   group6 (4 atoms)
colvars:   Protein_C-alpha_7 (1 atoms)
colvars:   group7 (4 atoms)
colvars:   Protein_C-alpha_8 (1 atoms)
colvars:   group8 (4 atoms)
colvars:   Protein_C-alpha_9 (1 atoms)
colvars:   group9 (4 atoms)
colvars:   Protein_C-alpha_10 (1 atoms)
colvars:   group10 (4 atoms)
colvars:   heavy_atoms (51 atoms)
colvars: # smp = on [default]
colvars: # colvarsTrajFrequency = 1
colvars: # colvarsRestartFrequency = 0 [default]
colvars: # scriptedColvarForces = off [default]
colvars: # scriptingAfterBiases = off [default]
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new collective variable.
colvars:   # name = "rmsdA"
colvars:   Initializing a new "rmsd" component.
colvars:     # name = "" [default]
colvars:     # componentCoeff = 1 [default]
colvars:     # componentExp = 1 [default]
colvars:     # period = 0 [default]
colvars:     # wrapAround = 0 [default]
colvars:     # forceNoPBC = off [default]
colvars:     # scalable = on [default]
colvars:       Initializing atom group "atoms".
colvars:       # name = "" [default]
colvars:       # centerReference = off [default]
colvars:       # rotateReference = off [default]
colvars:       # atomsOfGroup = "" [default]
colvars:       # indexGroup = "Protein_C-alpha"
colvars:       # psfSegID =  [default]
colvars:       # atomsFile = "" [default]
colvars:       # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:       # enableForces = on [default]
colvars:       # enableFitGradients = on [default]
colvars:       # printAtomIDs = off [default]
colvars:       Atom group "atoms" defined with 10 atoms requested: total mass = 120.11, total charge = 0.53.
colvars:     # refPositions =  [default]
colvars:     # refPositionsFile = "../Common/da.xyz"
colvars:     # refPositionsCol = "" [default]
colvars:     Warning: beginning from 2019-11-26 the XYZ file reader assumes Angstrom units.
colvars:     Enabling "centerReference" and "rotateReference", to minimize RMSD before calculating it as a variable: if this is not the desired behavior, disable them explicitly within the "atoms" block.
colvars:     This is a standard minimum RMSD, derivatives of the optimal rotation will not be computed as they cancel out in the gradients.
colvars:   All components initialized.
colvars:   # timeStepFactor = 1 [default]
colvars:   # width = 1
colvars:   # lowerBoundary = 0
colvars:   # upperBoundary = 5
colvars:   Reading legacy options lowerWall and lowerWallConstant: consider using a harmonicWalls restraint (caution: force constant would then be scaled by width^2).
colvars:   # lowerWall = 0
colvars:   Reading legacy options upperWall and upperWallConstant: consider using a harmonicWalls restraint (caution: force constant would then be scaled by width^2).
colvars:   # upperWall = 5
colvars:   Generating a new harmonicWalls bias for compatibility purposes.
colvars:   # hardLowerBoundary = off [default]
colvars:   # hardUpperBoundary = off [default]
colvars:   # expandBoundaries = off [default]
colvars:   # extendedLagrangian = off [default]
colvars:   # outputValue = on [default]
colvars:   # outputVelocity = off [default]
colvars:   # outputTotalForce = on
colvars:   # outputAppliedForce = off [default]
colvars:   # subtractAppliedForce = off [default]
colvars:   # runAve = off [default]
colvars:   # corrFunc = off [default]
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new collective variable.
colvars:   # name = "rmsdB"
colvars:   Initializing a new "rmsd" component.
colvars:     # name = "" [default]
colvars:     # componentCoeff = 1 [default]
colvars:     # componentExp = 1 [default]
colvars:     # period = 0 [default]
colvars:     # wrapAround = 0 [default]
colvars:     # forceNoPBC = off [default]
colvars:     # scalable = on [default]
colvars:       Initializing atom group "atoms".
colvars:       # name = "" [default]
colvars:       # centerReference = off [default]
colvars:       # rotateReference = off [default]
colvars:       # atomsOfGroup = "" [default]
colvars:       # indexGroup = "Protein_C-alpha"
colvars:       # psfSegID =  [default]
colvars:       # atomsFile = "" [default]
colvars:       # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:       # enableForces = on [default]
colvars:       # enableFitGradients = on [default]
colvars:       # printAtomIDs = off [default]
colvars:       Atom group "atoms" defined with 10 atoms requested: total mass = 120.11, total charge = 0.53.
colvars:     # refPositions =  [default]
colvars:     # refPositionsFile = "../Common/da.xyz"
colvars:     # refPositionsCol = "" [default]
colvars:     Enabling "centerReference" and "rotateReference", to minimize RMSD before calculating it as a variable: if this is not the desired behavior, disable them explicitly within the "atoms" block.
colvars:     This is a standard minimum RMSD, derivatives of the optimal rotation will not be computed as they cancel out in the gradients.
colvars:   All components initialized.
colvars:   # timeStepFactor = 1 [default]
colvars:   # width = 1
colvars:   # lowerBoundary = 0
colvars:   # upperBoundary = 5
colvars:   Reading legacy options lowerWall and lowerWallConstant: consider using a harmonicWalls restraint (caution: force constant would then be scaled by width^2).
colvars:   # lowerWall = 0
colvars:   Reading legacy options upperWall and upperWallConstant: consider using a harmonicWalls restraint (caution: force constant would then be scaled by width^2).
colvars:   # upperWall = 5
colvars:   Generating a new harmonicWalls bias for compatibility purposes.
colvars:   # hardLowerBoundary = off [default]
colvars:   # hardUpperBoundary = off [default]
colvars:   # expandBoundaries = off [default]
colvars:   # extendedLagrangian = off [default]
colvars:   # outputValue = on [default]
colvars:   # outputVelocity = off [default]
colvars:   # outputTotalForce = on
colvars:   # outputAppliedForce = off [default]
colvars:   # subtractAppliedForce = off [default]
colvars:   # runAve = off [default]
colvars:   # corrFunc = off [default]
colvars: ----------------------------------------------------------------------
colvars: Collective variables initialized, 2 in total.
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new "harmonic" instance.
colvars:   # name = "harmonic1" [default]
colvars:   # colvars = { rmsdA, rmsdB }
colvars:   # stepZeroData = off [default]
colvars:   # outputEnergy = off [default]
colvars:   # outputFreq = 0 [default]
colvars:   # timeStepFactor = 1 [default]
colvars:   # writeTISamples = off [default]
colvars:   # writeTIPMF = off [default]
colvars:   # centers = { 0, 0 }
colvars:   # targetCenters = { 0, 0 } [default]
colvars:   # outputCenters = off [default]
colvars:   # forceConstant = 1
colvars:   # targetForceConstant = -1 [default]
colvars:   The force constant for colvar "rmsdA" will be rescaled to 1 according to the specified width (1).
colvars:   The force constant for colvar "rmsdB" will be rescaled to 1 according to the specified width (1).
colvars: ----------------------------------------------------------------------
colvars: Collective variables biases initialized, 1 in total.
colvars: # units = "" [default]
colvars: # smp = on [default]
colvars: # colvarsTrajFrequency = 1 [default]
colvars: # colvarsRestartFrequency = 0 [default]
colvars: # scriptedColvarForces = off [default]
colvars: # scriptingAfterBiases = off [default]
colvars: ----------------------------------------------------------------------
colvars: Collective variables initialized, 2 in total.
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new "harmonicwalls" instance.
colvars:   # name = "rmsdAw"
colvars:   # colvars = { rmsdA }
colvars:   # stepZeroData = off [default]
colvars:   # outputEnergy = off [default]
colvars:   # outputFreq = 0 [default]
colvars:   # timeStepFactor = 1
colvars:   # writeTISamples = off [default]
colvars:   # writeTIPMF = off [default]
colvars:   # forceConstant = 1 [default]
colvars:   # targetForceConstant = -1 [default]
colvars:   # lowerWalls = { 0 }
colvars:   # upperWalls = { 5 }
colvars:   # lowerWallConstant = 100
colvars:   # upperWallConstant = 100
colvars:   The lower wall force constant for colvar "rmsdA" will be rescaled to 100 according to the specified width (1).
colvars:   The upper wall force constant for colvar "rmsdA" will be rescaled to 100 according to the specified width (1).
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new "harmonicwalls" instance.
colvars:   # name = "rmsdBw"
colvars:   # colvars = { rmsdB }
colvars:   # stepZeroData = off [default]
colvars:   # outputEnergy = off [default]
colvars:   # outputFreq = 0 [default]
colvars:   # timeStepFactor = 1
colvars:   # writeTISamples = off [default]
colvars:   # writeTIPMF = off [default]
colvars:   # forceConstant = 1 [default]
colvars:   # targetForceConstant = -1 [default]
colvars:   # lowerWalls = { 0 }
colvars:   # upperWalls = { 5 }
colvars:   # lowerWallConstant = 100
colvars:   # upperWallConstant = 100
colvars:   The lower wall force constant for colvar "rmsdB" will be rescaled to 100 according to the specified width (1).
colvars:   The upper wall force constant for colvar "rmsdB" will be rescaled to 100 according to the specified width (1).
colvars: ----------------------------------------------------------------------
colvars: Collective variables biases initialized, 3 in total.
colvars: ----------------------------------------------------------------------
colvars: Collective variables module (re)initialized.
colvars: ----------------------------------------------------------------------
colvars: Updating NAMD interface:
colvars: updating atomic data (10 atoms).
colvars: updating group data (0 scalable groups, 0 atoms in total).
colvars: Re-initialized atom group for variable "rmsdA":0/0. 10 atoms: total mass = 120.11, total charge = 0.53.
colvars: Re-initialized atom group for variable "rmsdB":0/0. 10 atoms: total mass = 120.11, total charge = 0.53.
colvars: The final output state file will be "test.colvars.state".
colvars: Opening trajectory file "test.colvars.traj".
colvars: Redefining the Tcl "cv" command to the new script interface.
colvars: Updating NAMD interface:
colvars: updating atomic data (10 atoms).
colvars: updating group data (0 scalable groups, 0 atoms in total).
colvars: Re-initialized atom group for variable "rmsdA":0/0. 10 atoms: total mass = 120.11, total charge = 0.53.
colvars: Re-initialized atom group for variable "rmsdB":0/0. 10 atoms: total mass = 120.11, total charge = 0.53.
colvars: The final output state file will be "test.colvars.state".
colvars: Saving collective variables state to "test.colvars.state".
