colvars: ----------------------------------------------------------------------
colvars: Please cite Fiorin et al, Mol Phys 2013:
colvars:  https://dx.doi.org/10.1080/00268976.2013.813594
colvars: in any publication based on this calculation.
colvars: SMP parallelism is enabled; if needed, use "smp off" to override this.
colvars: This version was built with the C++11 standard or higher.
colvars: ----------------------------------------------------------------------
colvars: Reading new configuration from file "test.rep2.in":
colvars: # units = "" [default]
colvars: # indexFile = "../Common/da.ndx"
colvars: The following index groups are currently defined:
colvars:   Protein (104 atoms)
colvars:   Protein_noH (51 atoms)
colvars:   Protein_Backbone (40 atoms)
colvars:   Protein_C-alpha (10 atoms)
colvars:   RMSD_atoms (10 atoms)
colvars:   Protein_C-alpha_1_2 (2 atoms)
colvars:   Protein_C-alpha_9_10 (2 atoms)
colvars:   Protein_C-alpha_1 (1 atoms)
colvars:   group1 (4 atoms)
colvars:   Protein_C-alpha_2 (1 atoms)
colvars:   group2 (4 atoms)
colvars:   Protein_C-alpha_3 (1 atoms)
colvars:   group3 (4 atoms)
colvars:   Protein_C-alpha_4 (1 atoms)
colvars:   group4 (4 atoms)
colvars:   Protein_C-alpha_5 (1 atoms)
colvars:   group5 (4 atoms)
colvars:   Protein_C-alpha_6 (1 atoms)
colvars:   group6 (4 atoms)
colvars:   Protein_C-alpha_7 (1 atoms)
colvars:   group7 (4 atoms)
colvars:   Protein_C-alpha_8 (1 atoms)
colvars:   group8 (4 atoms)
colvars:   Protein_C-alpha_9 (1 atoms)
colvars:   group9 (4 atoms)
colvars:   Protein_C-alpha_10 (1 atoms)
colvars:   group10 (4 atoms)
colvars:   heavy_atoms (51 atoms)
colvars: # smp = on [default]
colvars: # colvarsTrajFrequency = 1
colvars: # colvarsRestartFrequency = 40000 [default]
colvars: # scriptedColvarForces = off [default]
colvars: # scriptingAfterBiases = off [default]
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new collective variable.
colvars:   # name = "d"
colvars:   Initializing a new "distance" component.
colvars:     # name = "" [default]
colvars:     # componentCoeff = 1 [default]
colvars:     # componentExp = 1 [default]
colvars:     # period = 0 [default]
colvars:     # wrapAround = 0 [default]
colvars:     # forceNoPBC = off [default]
colvars:     # scalable = on [default]
colvars:       Initializing atom group "group1".
colvars:       # name = "" [default]
colvars:       # centerReference = off [default]
colvars:       # rotateReference = off [default]
colvars:       # atomsOfGroup = "" [default]
colvars:       # indexGroup = "Protein_C-alpha_1"
colvars:       # psfSegID =  [default]
colvars:       # atomsFile = "" [default]
colvars:       # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:       # enableForces = on [default]
colvars:       # enableFitGradients = on [default]
colvars:       Enabling scalable calculation for group "group1".
colvars:       # printAtomIDs = off [default]
colvars:       Atom group "group1" defined with 1 atoms requested: total mass = 12.011, total charge = -0.1.
colvars:       Initializing atom group "group2".
colvars:       # name = "" [default]
colvars:       # centerReference = off [default]
colvars:       # rotateReference = off [default]
colvars:       # atomsOfGroup = "" [default]
colvars:       # indexGroup = "Protein_C-alpha_10"
colvars:       # psfSegID =  [default]
colvars:       # atomsFile = "" [default]
colvars:       # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:       # enableForces = on [default]
colvars:       # enableFitGradients = on [default]
colvars:       Enabling scalable calculation for group "group2".
colvars:       # printAtomIDs = off [default]
colvars:       Atom group "group2" defined with 1 atoms requested: total mass = 12.011, total charge = 0.07.
colvars:     # oneSiteSystemForce = off [default]
colvars:     # oneSiteTotalForce = off [default]
colvars:   All components initialized.
colvars:   # timeStepFactor = 1 [default]
colvars:   # width = 0.5
colvars:   # lowerBoundary = 0
colvars:   # upperBoundary = 25
colvars:   Reading legacy options upperWall and upperWallConstant: consider using a harmonicWalls restraint (caution: force constant would then be scaled by width^2).
colvars:   # upperWall = 25
colvars:   Generating a new harmonicWalls bias for compatibility purposes.
colvars:   # hardLowerBoundary = off [default]
colvars:   # hardUpperBoundary = off [default]
colvars:   # expandBoundaries = off [default]
colvars:   # extendedLagrangian = off [default]
colvars:   # outputValue = on [default]
colvars:   # outputVelocity = off [default]
colvars:   # outputTotalForce = off [default]
colvars:   # outputAppliedForce = on
colvars:   # subtractAppliedForce = off [default]
colvars:   # runAve = off [default]
colvars:   # corrFunc = off [default]
colvars: ----------------------------------------------------------------------
colvars: Collective variables initialized, 1 in total.
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new "metadynamics" instance.
colvars:   # name = "metadynamics1" [default]
colvars:   # colvars = { d }
colvars:   # zeroStepData = off [default]
colvars:   # outputEnergy = off [default]
colvars:   # outputFreq = 40000 [default]
colvars:   # timeStepFactor = 1 [default]
colvars:   # writeTISamples = off [default]
colvars:   # writeTIPMF = off [default]
colvars:   # hillWeight = 0.01
colvars:   # newHillFrequency = 10
colvars:   # gaussianSigmas =  [default]
colvars:   # hillWidth = 1.25331
colvars:   Half-widths of the Gaussian hills (sigma's):
colvars:   d: 0.313329
colvars:   # multipleReplicas = on
colvars:   # useGrids = on [default]
colvars:   # gridsUpdateFrequency = 10 [default]
colvars:   # rebinGrids = off [default]
colvars:   # writeFreeEnergyFile = on [default]
colvars:   # keepHills = off [default]
colvars:   # keepFreeEnergyFiles = off [default]
colvars:   # writeHillsTrajectory = off [default]
colvars:   # writePartialFreeEnergyFile = off [default]
colvars:   # replicaID = "rep2"
colvars:   # replicasRegistry = "replicas.registry.txt"
colvars:   # replicaUpdateFrequency = 10
colvars:   # wellTempered = off [default]
colvars:   # biasTemperature = -1 [default]
colvars:   # ebMeta = off [default]
colvars: ----------------------------------------------------------------------
colvars: Collective variables biases initialized, 1 in total.
colvars: # units = "" [default]
colvars: # smp = on [default]
colvars: # colvarsTrajFrequency = 1 [default]
colvars: # colvarsRestartFrequency = 40000 [default]
colvars: # scriptedColvarForces = off [default]
colvars: # scriptingAfterBiases = off [default]
colvars: ----------------------------------------------------------------------
colvars: Collective variables initialized, 1 in total.
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new "harmonicwalls" instance.
colvars:   # name = "dw"
colvars:   # colvars = { d }
colvars:   # zeroStepData = off [default]
colvars:   # outputEnergy = off [default]
colvars:   # outputFreq = 40000 [default]
colvars:   # timeStepFactor = 1
colvars:   # writeTISamples = off [default]
colvars:   # writeTIPMF = off [default]
colvars:   # forceConstant = 1 [default]
colvars:   # targetForceConstant = -1 [default]
colvars:   # lowerWalls = { 0 } [default]
colvars:   Lower walls were not provided.
colvars:   # upperWalls = { 25 }
colvars:   # upperWallConstant = 25
colvars:   The upper wall force constant for colvar "d" will be rescaled to 100 according to the specified width (0.5).
colvars: ----------------------------------------------------------------------
colvars: Collective variables biases initialized, 2 in total.
colvars: ----------------------------------------------------------------------
colvars: Collective variables module (re)initialized.
colvars: ----------------------------------------------------------------------
colvars: Updating NAMD interface:
colvars: updating atomic data (0 atoms).
colvars: updating group data (2 scalable groups, 2 atoms in total).
colvars: Re-initialized atom group for variable "d":0/0. 1 atoms: total mass = 12.011, total charge = -0.1.
colvars: Re-initialized atom group for variable "d":0/1. 1 atoms: total mass = 12.011, total charge = 0.07.
colvars: ----------------------------------------------------------------------
colvars: Restarting from file "test.rep2.colvars.state".
colvars:   Restarting collective variable "d" from value: 9.947
colvars:   Restarting metadynamics bias "metadynamics1" from step number 100.
colvars:   Restarting harmonicwalls bias "dw" from step number 100.
colvars: ----------------------------------------------------------------------
colvars: The restart output state file will be "testres.rep2r.colvars.state".
colvars: The final output state file will be "testres.rep2.colvars.state".
colvars: Opening trajectory file "testres.rep2.colvars.traj".
colvars: Redefining the Tcl "cv" command to the new script interface.
colvars: Updating NAMD interface:
colvars: updating atomic data (0 atoms).
colvars: updating group data (2 scalable groups, 2 atoms in total).
colvars: Re-initialized atom group for variable "d":0/0. 1 atoms: total mass = 12.011, total charge = -0.1.
colvars: Re-initialized atom group for variable "d":0/1. 1 atoms: total mass = 12.011, total charge = 0.07.
colvars: The restart output state file will be "testres.rep2r.colvars.state".
colvars: The final output state file will be "testres.rep2.colvars.state".
colvars:   Metadynamics bias "metadynamics1": accessing replica "rep1".
colvars:   Metadynamics bias "metadynamics1": replica "rep1" has supplied a new state file, "/data/local/Fiorin/work/colvars/namd/tests/library/011_multiple_walker_mtd/testres.rep1.colvars.metadynamics1.rep1.state".
colvars:   Metadynamics bias "metadynamics1": reading the state of replica "rep1" from file "/data/local/Fiorin/work/colvars/namd/tests/library/011_multiple_walker_mtd/testres.rep1.colvars.metadynamics1.rep1.state".
colvars:   Restarting metadynamics bias "metadynamics1" from step number 200.
colvars: Saving collective variables state to "testres.rep2.colvars.state".
