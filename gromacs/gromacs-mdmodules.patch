diff --git a/CMakeLists.txt b/CMakeLists.txt
index 31e2bbbec5..bceb9ff32b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -646,6 +646,9 @@ include(gmxManageLmfit)
 
 include(gmxManageMuparser)
 
+include(gmxManageColvars)
+include(gmxManageLepton)
+
 ##################################################
 # Process SIMD instruction settings
 ##################################################
diff --git a/src/gromacs/CMakeLists.txt b/src/gromacs/CMakeLists.txt
index 96107341de..4628c15976 100644
--- a/src/gromacs/CMakeLists.txt
+++ b/src/gromacs/CMakeLists.txt
@@ -146,6 +146,11 @@ if (WIN32)
 endif()
 list(APPEND libgromacs_object_library_dependencies thread_mpi)
 
+gmx_manage_colvars()
+gmx_manage_lepton()
+list(APPEND libgromacs_object_library_dependencies colvars)
+list(APPEND libgromacs_object_library_dependencies lepton)
+
 # This code is here instead of utility/CMakeLists.txt, because CMake
 # custom commands and source file properties can only be set in the directory
 # that contains the target that uses them.
@@ -218,6 +223,8 @@ add_library(legacy_modules INTERFACE)
 target_include_directories(legacy_modules INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/src>)
 target_link_libraries(libgromacs PRIVATE $<BUILD_INTERFACE:legacy_modules>)
 
+gmx_include_colvars_headers()
+
 # Add these contents first because linking their tests can take a lot
 # of time, so we want lots of parallel work still available after
 # linking starts.
diff --git a/src/gromacs/applied_forces/CMakeLists.txt b/src/gromacs/applied_forces/CMakeLists.txt
index 3c4987f892..53e6b91d70 100644
--- a/src/gromacs/applied_forces/CMakeLists.txt
+++ b/src/gromacs/applied_forces/CMakeLists.txt
@@ -67,6 +67,7 @@ gmx_add_libgromacs_sources(
 add_subdirectory(awh)
 add_subdirectory(densityfitting)
 add_subdirectory(qmmm)
+add_subdirectory(colvars)
 
 if (BUILD_TESTING)
     add_subdirectory(tests)
diff --git a/src/gromacs/fileio/checkpoint.cpp b/src/gromacs/fileio/checkpoint.cpp
index b493a9a82f..25299addec 100644
--- a/src/gromacs/fileio/checkpoint.cpp
+++ b/src/gromacs/fileio/checkpoint.cpp
@@ -119,7 +119,10 @@ template void readKvtCheckpointValue(compat::not_null<real*>   value,
                                      const std::string&        name,
                                      const std::string&        identifier,
                                      const KeyValueTreeObject& kvt);
-
+template void readKvtCheckpointValue(compat::not_null<std::string*> value,
+                                     const std::string&             name,
+                                     const std::string&             identifier,
+                                     const KeyValueTreeObject&      kvt);
 template<typename ValueType>
 void writeKvtCheckpointValue(const ValueType&          value,
                              const std::string&        name,
@@ -137,7 +140,10 @@ template void writeKvtCheckpointValue(const real&               value,
                                       const std::string&        name,
                                       const std::string&        identifier,
                                       KeyValueTreeObjectBuilder kvtBuilder);
-
+template void writeKvtCheckpointValue(const std::string&        value,
+                                      const std::string&        name,
+                                      const std::string&        identifier,
+                                      KeyValueTreeObjectBuilder kvtBuilder);
 
 } // namespace gmx
 
diff --git a/src/gromacs/fileio/checkpoint.h b/src/gromacs/fileio/checkpoint.h
index fa886f6e47..762a9ad349 100644
--- a/src/gromacs/fileio/checkpoint.h
+++ b/src/gromacs/fileio/checkpoint.h
@@ -99,6 +99,11 @@ extern template void readKvtCheckpointValue(compat::not_null<real*>   value,
                                             const std::string&        name,
                                             const std::string&        identifier,
                                             const KeyValueTreeObject& kvt);
+//! \copydoc readKvtCheckpointValue
+extern template void readKvtCheckpointValue(compat::not_null<std::string*> value,
+                                            const std::string&             name,
+                                            const std::string&             identifier,
+                                            const KeyValueTreeObject&      kvt);
 
 /*! \brief Write to a key-value-tree used for checkpointing.
  *
@@ -125,6 +130,11 @@ extern template void writeKvtCheckpointValue(const real&               value,
                                              const std::string&        name,
                                              const std::string&        identifier,
                                              KeyValueTreeObjectBuilder kvtBuilder);
+//! \copydoc writeKvtCheckpointValue
+extern template void writeKvtCheckpointValue(const std::string&        value,
+                                             const std::string&        name,
+                                             const std::string&        identifier,
+                                             KeyValueTreeObjectBuilder kvtBuilder);
 
 /*! \libinternal
  * \brief Provides the MDModules with the checkpointed data on the main rank.
diff --git a/src/gromacs/mdrun/mdmodules.cpp b/src/gromacs/mdrun/mdmodules.cpp
index 5221ff025c..715dafc20b 100644
--- a/src/gromacs/mdrun/mdmodules.cpp
+++ b/src/gromacs/mdrun/mdmodules.cpp
@@ -40,6 +40,7 @@
 #include "gromacs/applied_forces/densityfitting/densityfitting.h"
 #include "gromacs/applied_forces/electricfield.h"
 #include "gromacs/applied_forces/qmmm/qmmm.h"
+#include "gromacs/applied_forces/colvars/colvarsMDModule.h"
 #include "gromacs/imd/imd.h"
 #include "gromacs/mdrunutility/mdmodulesnotifiers.h"
 #include "gromacs/mdtypes/iforceprovider.h"
@@ -67,7 +68,8 @@ public:
         field_(createElectricFieldModule()),
         imd_(createInteractiveMolecularDynamicsModule()),
         qmmm_(QMMMModuleInfo::create()),
-        swapCoordinates_(createSwapCoordinatesModule())
+        swapCoordinates_(createSwapCoordinatesModule()),
+        colvars_(ColvarsModuleInfo::create())
     {
     }
 
@@ -78,6 +80,7 @@ public:
         field_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
         densityFitting_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
         qmmm_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
+        colvars_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
         // In future, other sections would also go here.
     }
 
@@ -106,6 +109,7 @@ public:
     std::unique_ptr<IMDModule>      imd_;
     std::unique_ptr<IMDModule>      qmmm_;
     std::unique_ptr<IMDModule>      swapCoordinates_;
+    std::unique_ptr<IMDModule>      colvars_;
 
     /*! \brief List of registered MDModules
      *
@@ -129,6 +133,7 @@ void MDModules::initMdpTransform(IKeyValueTreeTransformRules* rules)
     impl_->field_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
     impl_->densityFitting_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
     impl_->qmmm_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
+    impl_->colvars_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
 }
 
 void MDModules::buildMdpOutput(KeyValueTreeObjectBuilder* builder)
@@ -136,6 +141,7 @@ void MDModules::buildMdpOutput(KeyValueTreeObjectBuilder* builder)
     impl_->field_->mdpOptionProvider()->buildMdpOutput(builder);
     impl_->densityFitting_->mdpOptionProvider()->buildMdpOutput(builder);
     impl_->qmmm_->mdpOptionProvider()->buildMdpOutput(builder);
+    impl_->colvars_->mdpOptionProvider()->buildMdpOutput(builder);
 }
 
 void MDModules::assignOptionsToModules(const KeyValueTreeObject& params, IKeyValueTreeErrorHandler* errorHandler)
@@ -173,6 +179,7 @@ ForceProviders* MDModules::initForceProviders()
     impl_->field_->initForceProviders(impl_->forceProviders_.get());
     impl_->densityFitting_->initForceProviders(impl_->forceProviders_.get());
     impl_->qmmm_->initForceProviders(impl_->forceProviders_.get());
+    impl_->colvars_->initForceProviders(impl_->forceProviders_.get());
     for (auto&& module : impl_->modules_)
     {
         module->initForceProviders(impl_->forceProviders_.get());
@@ -184,12 +191,14 @@ void MDModules::subscribeToPreProcessingNotifications()
 {
     impl_->densityFitting_->subscribeToPreProcessingNotifications(&impl_->notifiers_);
     impl_->qmmm_->subscribeToPreProcessingNotifications(&impl_->notifiers_);
+    impl_->colvars_->subscribeToPreProcessingNotifications(&impl_->notifiers_);
 }
 
 void MDModules::subscribeToSimulationSetupNotifications()
 {
     impl_->densityFitting_->subscribeToSimulationSetupNotifications(&impl_->notifiers_);
     impl_->qmmm_->subscribeToSimulationSetupNotifications(&impl_->notifiers_);
+    impl_->colvars_->subscribeToSimulationSetupNotifications(&impl_->notifiers_);
 }
 
 void MDModules::add(std::shared_ptr<gmx::IMDModule> module)
diff --git a/src/gromacs/utility/keyvaluetreeserializer.cpp b/src/gromacs/utility/keyvaluetreeserializer.cpp
index 964f60e130..81581fdf7f 100644
--- a/src/gromacs/utility/keyvaluetreeserializer.cpp
+++ b/src/gromacs/utility/keyvaluetreeserializer.cpp
@@ -169,6 +169,30 @@ struct SerializationTraits<bool>
     }
 };
 
+template<>
+struct SerializationTraits<char>
+{
+    static void serialize(char value, ISerializer* serializer) { serializer->doChar(&value); }
+    static void deserialize(KeyValueTreeValueBuilder* builder, ISerializer* serializer)
+    {
+        char value = ' ';
+        serializer->doChar(&value);
+        builder->setValue<char>(value);
+    }
+};
+
+template<>
+struct SerializationTraits<unsigned char>
+{
+    static void serialize(unsigned char value, ISerializer* serializer) { serializer->doUChar(&value); }
+    static void deserialize(KeyValueTreeValueBuilder* builder, ISerializer* serializer)
+    {
+        unsigned char value = '\0';
+        serializer->doUChar(&value);
+        builder->setValue<unsigned char>(value);
+    }
+};
+
 template<>
 struct SerializationTraits<int>
 {
@@ -245,6 +269,8 @@ void ValueSerializer::initSerializers()
         SERIALIZER('A', KeyValueTreeArray),
         SERIALIZER('s', std::string),
         SERIALIZER('b', bool),
+        SERIALIZER('c', char),
+        SERIALIZER('u', unsigned char),
         SERIALIZER('i', int),
         SERIALIZER('l', int64_t),
         SERIALIZER('f', float),
