diff --git a/CMakeLists.txt b/CMakeLists.txt
index 31e2bbbec5..5dc774e726 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -646,6 +646,8 @@ include(gmxManageLmfit)
 
 include(gmxManageMuparser)
 
+include(gmxManageColvars)
+
 ##################################################
 # Process SIMD instruction settings
 ##################################################
diff --git a/src/config.h.cmakein b/src/config.h.cmakein
index 470777bbff..5e3fac0c93 100644
--- a/src/config.h.cmakein
+++ b/src/config.h.cmakein
@@ -457,6 +457,9 @@
 /* Define if we have muparser support */
 #cmakedefine01 HAVE_MUPARSER
 
+/* Define if we are building with Colvars */
+#cmakedefine01 HAVE_COLVARS
+
 /* Build using clang analyzer */
 #cmakedefine01 GMX_CLANG_ANALYZER
 
diff --git a/src/gromacs/CMakeLists.txt b/src/gromacs/CMakeLists.txt
index 96107341de..a722ddd5da 100644
--- a/src/gromacs/CMakeLists.txt
+++ b/src/gromacs/CMakeLists.txt
@@ -146,6 +146,14 @@ if (WIN32)
 endif()
 list(APPEND libgromacs_object_library_dependencies thread_mpi)
 
+
+gmx_manage_colvars()
+if(NOT GMX_USE_COLVARS STREQUAL "NONE")
+    list(APPEND libgromacs_object_library_dependencies colvars)
+endif()
+
+
+
 # This code is here instead of utility/CMakeLists.txt, because CMake
 # custom commands and source file properties can only be set in the directory
 # that contains the target that uses them.
@@ -210,6 +218,8 @@ if(GMX_GPU_FFT_ROCFFT)
     target_link_libraries(libgromacs PRIVATE roc::rocfft)
 endif()
 
+gmx_include_colvars_headers()
+
 target_link_libraries(libgromacs PRIVATE $<BUILD_INTERFACE:common>)
 # As long as the libgromacs target has source files that reference headers from
 # modules that don't provide CMake targets, libgromacs needs to use `src/`
diff --git a/src/gromacs/applied_forces/CMakeLists.txt b/src/gromacs/applied_forces/CMakeLists.txt
index 3c4987f892..cc5f50c7a6 100644
--- a/src/gromacs/applied_forces/CMakeLists.txt
+++ b/src/gromacs/applied_forces/CMakeLists.txt
@@ -67,6 +67,10 @@ gmx_add_libgromacs_sources(
 add_subdirectory(awh)
 add_subdirectory(densityfitting)
 add_subdirectory(qmmm)
+if(NOT GMX_USE_COLVARS STREQUAL "NONE")
+    # Build Colvars interface files if the library is available (default)
+    add_subdirectory(colvars)
+endif()
 
 if (BUILD_TESTING)
     add_subdirectory(tests)
diff --git a/src/gromacs/mdrun/mdmodules.cpp b/src/gromacs/mdrun/mdmodules.cpp
index 5221ff025c..faa8ac0b9e 100644
--- a/src/gromacs/mdrun/mdmodules.cpp
+++ b/src/gromacs/mdrun/mdmodules.cpp
@@ -33,10 +33,15 @@
  */
 #include "gmxpre.h"
 
+#include "config.h" // Allow conditional compilation of individual MDModules
+
 #include "mdmodules.h"
 
 #include <memory>
 
+#ifdef HAVE_COLVARS
+#include "gromacs/applied_forces/colvars/colvarsMDModule.h"
+#endif
 #include "gromacs/applied_forces/densityfitting/densityfitting.h"
 #include "gromacs/applied_forces/electricfield.h"
 #include "gromacs/applied_forces/qmmm/qmmm.h"
@@ -67,7 +72,12 @@ public:
         field_(createElectricFieldModule()),
         imd_(createInteractiveMolecularDynamicsModule()),
         qmmm_(QMMMModuleInfo::create()),
+#ifdef HAVE_COLVARS
+        swapCoordinates_(createSwapCoordinatesModule()),
+        colvars_(ColvarsModuleInfo::create())
+#else
         swapCoordinates_(createSwapCoordinatesModule())
+#endif
     {
     }
 
@@ -78,6 +88,9 @@ public:
         field_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
         densityFitting_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
         qmmm_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
+#ifdef HAVE_COLVARS
+        colvars_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
+#endif
         // In future, other sections would also go here.
     }
 
@@ -106,6 +119,9 @@ public:
     std::unique_ptr<IMDModule>      imd_;
     std::unique_ptr<IMDModule>      qmmm_;
     std::unique_ptr<IMDModule>      swapCoordinates_;
+#ifdef HAVE_COLVARS
+    std::unique_ptr<IMDModule>      colvars_;
+#endif
 
     /*! \brief List of registered MDModules
      *
@@ -129,6 +145,9 @@ void MDModules::initMdpTransform(IKeyValueTreeTransformRules* rules)
     impl_->field_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
     impl_->densityFitting_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
     impl_->qmmm_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
+#ifdef HAVE_COLVARS
+    impl_->colvars_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
+#endif
 }
 
 void MDModules::buildMdpOutput(KeyValueTreeObjectBuilder* builder)
@@ -136,6 +155,9 @@ void MDModules::buildMdpOutput(KeyValueTreeObjectBuilder* builder)
     impl_->field_->mdpOptionProvider()->buildMdpOutput(builder);
     impl_->densityFitting_->mdpOptionProvider()->buildMdpOutput(builder);
     impl_->qmmm_->mdpOptionProvider()->buildMdpOutput(builder);
+#ifdef HAVE_COLVARS
+    impl_->colvars_->mdpOptionProvider()->buildMdpOutput(builder);
+#endif
 }
 
 void MDModules::assignOptionsToModules(const KeyValueTreeObject& params, IKeyValueTreeErrorHandler* errorHandler)
@@ -173,6 +195,9 @@ ForceProviders* MDModules::initForceProviders()
     impl_->field_->initForceProviders(impl_->forceProviders_.get());
     impl_->densityFitting_->initForceProviders(impl_->forceProviders_.get());
     impl_->qmmm_->initForceProviders(impl_->forceProviders_.get());
+#ifdef HAVE_COLVARS
+    impl_->colvars_->initForceProviders(impl_->forceProviders_.get());
+#endif
     for (auto&& module : impl_->modules_)
     {
         module->initForceProviders(impl_->forceProviders_.get());
@@ -184,12 +209,18 @@ void MDModules::subscribeToPreProcessingNotifications()
 {
     impl_->densityFitting_->subscribeToPreProcessingNotifications(&impl_->notifiers_);
     impl_->qmmm_->subscribeToPreProcessingNotifications(&impl_->notifiers_);
+#ifdef HAVE_COLVARS
+    impl_->colvars_->subscribeToPreProcessingNotifications(&impl_->notifiers_);
+#endif
 }
 
 void MDModules::subscribeToSimulationSetupNotifications()
 {
     impl_->densityFitting_->subscribeToSimulationSetupNotifications(&impl_->notifiers_);
     impl_->qmmm_->subscribeToSimulationSetupNotifications(&impl_->notifiers_);
+#ifdef HAVE_COLVARS
+    impl_->colvars_->subscribeToSimulationSetupNotifications(&impl_->notifiers_);
+#endif
 }
 
 void MDModules::add(std::shared_ptr<gmx::IMDModule> module)
