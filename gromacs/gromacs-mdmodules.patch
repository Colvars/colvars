diff --git a/CMakeLists.txt b/CMakeLists.txt
index 31e2bbbec5..bceb9ff32b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -646,6 +646,9 @@ include(gmxManageLmfit)
 
 include(gmxManageMuparser)
 
+include(gmxManageColvars)
+include(gmxManageLepton)
+
 ##################################################
 # Process SIMD instruction settings
 ##################################################
diff --git a/src/gromacs/CMakeLists.txt b/src/gromacs/CMakeLists.txt
index 96107341de..4628c15976 100644
--- a/src/gromacs/CMakeLists.txt
+++ b/src/gromacs/CMakeLists.txt
@@ -146,6 +146,11 @@ if (WIN32)
 endif()
 list(APPEND libgromacs_object_library_dependencies thread_mpi)
 
+gmx_manage_colvars()
+gmx_manage_lepton()
+list(APPEND libgromacs_object_library_dependencies colvars)
+list(APPEND libgromacs_object_library_dependencies lepton)
+
 # This code is here instead of utility/CMakeLists.txt, because CMake
 # custom commands and source file properties can only be set in the directory
 # that contains the target that uses them.
@@ -218,6 +223,8 @@ add_library(legacy_modules INTERFACE)
 target_include_directories(legacy_modules INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/src>)
 target_link_libraries(libgromacs PRIVATE $<BUILD_INTERFACE:legacy_modules>)
 
+gmx_include_colvars_headers()
+
 # Add these contents first because linking their tests can take a lot
 # of time, so we want lots of parallel work still available after
 # linking starts.
diff --git a/src/gromacs/applied_forces/CMakeLists.txt b/src/gromacs/applied_forces/CMakeLists.txt
index 3c4987f892..53e6b91d70 100644
--- a/src/gromacs/applied_forces/CMakeLists.txt
+++ b/src/gromacs/applied_forces/CMakeLists.txt
@@ -67,6 +67,7 @@ gmx_add_libgromacs_sources(
 add_subdirectory(awh)
 add_subdirectory(densityfitting)
 add_subdirectory(qmmm)
+add_subdirectory(colvars)
 
 if (BUILD_TESTING)
     add_subdirectory(tests)
diff --git a/src/gromacs/mdrun/mdmodules.cpp b/src/gromacs/mdrun/mdmodules.cpp
index 5221ff025c..715dafc20b 100644
--- a/src/gromacs/mdrun/mdmodules.cpp
+++ b/src/gromacs/mdrun/mdmodules.cpp
@@ -40,6 +40,7 @@
 #include "gromacs/applied_forces/densityfitting/densityfitting.h"
 #include "gromacs/applied_forces/electricfield.h"
 #include "gromacs/applied_forces/qmmm/qmmm.h"
+#include "gromacs/applied_forces/colvars/colvarsMDModule.h"
 #include "gromacs/imd/imd.h"
 #include "gromacs/mdrunutility/mdmodulesnotifiers.h"
 #include "gromacs/mdtypes/iforceprovider.h"
@@ -67,7 +68,8 @@ public:
         field_(createElectricFieldModule()),
         imd_(createInteractiveMolecularDynamicsModule()),
         qmmm_(QMMMModuleInfo::create()),
-        swapCoordinates_(createSwapCoordinatesModule())
+        swapCoordinates_(createSwapCoordinatesModule()),
+        colvars_(ColvarsModuleInfo::create())
     {
     }
 
@@ -78,6 +80,7 @@ public:
         field_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
         densityFitting_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
         qmmm_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
+        colvars_->mdpOptionProvider()->initMdpOptions(&appliedForcesOptions);
         // In future, other sections would also go here.
     }
 
@@ -106,6 +109,7 @@ public:
     std::unique_ptr<IMDModule>      imd_;
     std::unique_ptr<IMDModule>      qmmm_;
     std::unique_ptr<IMDModule>      swapCoordinates_;
+    std::unique_ptr<IMDModule>      colvars_;
 
     /*! \brief List of registered MDModules
      *
@@ -129,6 +133,7 @@ void MDModules::initMdpTransform(IKeyValueTreeTransformRules* rules)
     impl_->field_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
     impl_->densityFitting_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
     impl_->qmmm_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
+    impl_->colvars_->mdpOptionProvider()->initMdpTransform(appliedForcesScope.rules());
 }
 
 void MDModules::buildMdpOutput(KeyValueTreeObjectBuilder* builder)
@@ -136,6 +141,7 @@ void MDModules::buildMdpOutput(KeyValueTreeObjectBuilder* builder)
     impl_->field_->mdpOptionProvider()->buildMdpOutput(builder);
     impl_->densityFitting_->mdpOptionProvider()->buildMdpOutput(builder);
     impl_->qmmm_->mdpOptionProvider()->buildMdpOutput(builder);
+    impl_->colvars_->mdpOptionProvider()->buildMdpOutput(builder);
 }
 
 void MDModules::assignOptionsToModules(const KeyValueTreeObject& params, IKeyValueTreeErrorHandler* errorHandler)
@@ -173,6 +179,7 @@ ForceProviders* MDModules::initForceProviders()
     impl_->field_->initForceProviders(impl_->forceProviders_.get());
     impl_->densityFitting_->initForceProviders(impl_->forceProviders_.get());
     impl_->qmmm_->initForceProviders(impl_->forceProviders_.get());
+    impl_->colvars_->initForceProviders(impl_->forceProviders_.get());
     for (auto&& module : impl_->modules_)
     {
         module->initForceProviders(impl_->forceProviders_.get());
@@ -184,12 +191,14 @@ void MDModules::subscribeToPreProcessingNotifications()
 {
     impl_->densityFitting_->subscribeToPreProcessingNotifications(&impl_->notifiers_);
     impl_->qmmm_->subscribeToPreProcessingNotifications(&impl_->notifiers_);
+    impl_->colvars_->subscribeToPreProcessingNotifications(&impl_->notifiers_);
 }
 
 void MDModules::subscribeToSimulationSetupNotifications()
 {
     impl_->densityFitting_->subscribeToSimulationSetupNotifications(&impl_->notifiers_);
     impl_->qmmm_->subscribeToSimulationSetupNotifications(&impl_->notifiers_);
+    impl_->colvars_->subscribeToSimulationSetupNotifications(&impl_->notifiers_);
 }
 
 void MDModules::add(std::shared_ptr<gmx::IMDModule> module)
diff --git a/src/gromacs/mdrun/runner.cpp b/src/gromacs/mdrun/runner.cpp
index bacb6321e9..68cbdc02c4 100644
--- a/src/gromacs/mdrun/runner.cpp
+++ b/src/gromacs/mdrun/runner.cpp
@@ -1135,10 +1135,12 @@ int Mdrunner::mdrunner()
         setupNotifier.notify(*inputrec->internalParameters);
     }
 
-    // Let MdModules know the .tpr filename
+    // Let MdModules know the .tpr input and .edr output filenames
     {
         gmx::MdRunInputFilename mdRunInputFilename = { ftp2fn(efTPR, filenames.size(), filenames.data()) };
         setupNotifier.notify(mdRunInputFilename);
+        gmx::EdrOutputFilename edrOutputFilename = { ftp2fn(efEDR, filenames.size(), filenames.data()) };
+        setupNotifier.notify(edrOutputFilename);
     }
 
     if (fplog != nullptr)
diff --git a/src/gromacs/mdrunutility/mdmodulesnotifiers.h b/src/gromacs/mdrunutility/mdmodulesnotifiers.h
index 69872b3535..7d1520fc26 100644
--- a/src/gromacs/mdrunutility/mdmodulesnotifiers.h
+++ b/src/gromacs/mdrunutility/mdmodulesnotifiers.h
@@ -167,6 +167,14 @@ struct MdRunInputFilename
     std::string mdRunFilename_;
 };
 
+/*! \libinternal \brief Energy trajectory output filename from Mdrun.
+ */
+struct EdrOutputFilename
+{
+    //! The name of energy output file
+    std::string edrOutputFilename_;
+};
+
 /*! \libinternal \brief Notification for QM program input filename
  *  provided by user as command-line argument for grompp
  */
@@ -354,6 +362,7 @@ struct MDModulesNotifiers
      * \tparam t_commrec&           Provides a communicator to the modules during simulation
      *                              setup
      * \tparam MdRunInputFilename&  Allows modules to know .tpr filename during mdrun
+     * \tparam EdrOutputFilename&   Allows modules to know .edr filename during mdrun
      */
     BuildMDModulesNotifier<const KeyValueTreeObject&,
                            LocalAtomSetManager*,
@@ -366,7 +375,8 @@ struct MDModulesNotifiers
                            const PbcType&,
                            const SimulationTimeStep&,
                            const t_commrec&,
-                           const MdRunInputFilename&>::type simulationSetupNotifier_;
+                           const MdRunInputFilename&,
+                           const EdrOutputFilename&>::type simulationSetupNotifier_;
 };
 
 } // namespace gmx
