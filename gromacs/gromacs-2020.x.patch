diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0911eb2a45..5530c1576a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -200,6 +200,9 @@ option(GMX_USE_OPENCL "Enable OpenCL acceleration" OFF)

 option(GMX_INSTALL_LEGACY_API "Install legacy headers" OFF)

+include(gmxManageColvars)
+include(gmxManageLepton)
+
 # The earliest version of the CUDA toolkit that supports c++14 is 9.0
 set(REQUIRED_CUDA_VERSION 9.0)
 set(REQUIRED_CUDA_COMPUTE_CAPABILITY 3.0)
diff --git a/src/gromacs/CMakeLists.txt b/src/gromacs/CMakeLists.txt
index 9249a7a08f..18b45ff01f 100644
--- a/src/gromacs/CMakeLists.txt
+++ b/src/gromacs/CMakeLists.txt
@@ -137,6 +137,12 @@ if (WIN32)
 endif()
 list(APPEND libgromacs_object_library_dependencies thread_mpi)

+# Add Colvars and Lepton targets, embed their object code in libgromacs
+gmx_manage_colvars()
+gmx_manage_lepton()
+list(APPEND libgromacs_object_library_dependencies colvars)
+list(APPEND libgromacs_object_library_dependencies lepton)
+
 configure_file(version.h.cmakein version.h)
 if(GMX_INSTALL_LEGACY_API)
   install(FILES
@@ -195,6 +201,8 @@ else()
     add_library(libgromacs ${LIBGROMACS_SOURCES})
 endif()

+gmx_include_colvars_headers()
+
 # Add these contents first because linking their tests can take a lot
 # of time, so we want lots of parallel work still available after
 # linking starts.
diff --git a/src/gromacs/fileio/checkpoint.cpp b/src/gromacs/fileio/checkpoint.cpp
index 9c6cfe4213..ec2e64f61f 100644
--- a/src/gromacs/fileio/checkpoint.cpp
+++ b/src/gromacs/fileio/checkpoint.cpp
@@ -73,6 +73,7 @@
 #include "gromacs/mdtypes/pullhistory.h"
 #include "gromacs/mdtypes/state.h"
 #include "gromacs/mdtypes/swaphistory.h"
+#include "gromacs/mdtypes/colvarshistory.h"
 #include "gromacs/trajectory/trajectoryframe.h"
 #include "gromacs/utility/arrayref.h"
 #include "gromacs/utility/baseversion.h"
@@ -127,7 +128,9 @@ enum cptv
  * Backward compatibility for reading old run input files is maintained
  * by checking this version number against that of the file and then using
  * the correct code path. */
-static const int cpt_version = cptv_Count - 1;
+/* COLVARS : add a value of 1000 for Colvars support and
+ * prevent regular GROMACS to read colvars .cpt files */
+static const int cpt_version = cptv_Count - 1 + 1000;


 const char* est_names[estNR] = { "FE-lambda",
@@ -1178,6 +1181,15 @@ static void do_cpt_header(XDR* xd, gmx_bool bRead, FILE* list, CheckpointHeaderC
     {
         contents->flagsPullHistory = 0;
     }
+    if (contents->file_version >= cptv_Count - 1 + 1000)
+    {
+        do_cpt_int_err(xd, "colvars atoms", &contents->ecolvars, list);
+    }
+    else
+    {
+        contents->ecolvars = 0;
+    }
+
 }

 static int do_cpt_footer(XDR* xd, int file_version)
@@ -1909,6 +1921,35 @@ static int do_cpt_EDstate(XDR* xd, gmx_bool bRead, int nED, edsamhistory_t* EDst
     return 0;
 }

+/* This function stores the last whole configuration of the colvars atoms in the .cpt file */
+static int do_cpt_colvars(XDR* xd, gmx_bool bRead, int ecolvars, colvarshistory_t* colvarsstate, FILE* list)
+{
+
+    if (ecolvars == 0)
+    {
+        return 0;
+    }
+
+    colvarsstate->bFromCpt = bRead;
+    colvarsstate->n_atoms  = ecolvars;
+
+    /* Write data */
+    char buf[STRLEN];
+    sprintf(buf, "Colvars atoms in reference structure : %d", ecolvars);
+    sprintf(buf, "Colvars xa_old_whole");
+    if (bRead)
+    {
+        snew(colvarsstate->xa_old_whole, colvarsstate->n_atoms);
+        do_cpt_n_rvecs_err(xd, buf, colvarsstate->n_atoms, colvarsstate->xa_old_whole, list);
+    }
+    else
+    {
+        do_cpt_n_rvecs_err(xd, buf, colvarsstate->n_atoms, colvarsstate->xa_old_whole_p, list);
+    }
+
+    return 0;
+}
+
 static int do_cpt_correlation_grid(XDR*                         xd,
                                    gmx_bool                     bRead,
                                    gmx_unused int               fflags,
@@ -2330,6 +2371,10 @@ void write_checkpoint(const char*                   fn,
     swaphistory_t* swaphist    = observablesHistory->swapHistory.get();
     int            eSwapCoords = (swaphist ? swaphist->eSwapCoords : eswapNO);

+    /* COLVARS */
+    colvarshistory_t* colvarshist = observablesHistory->colvarsHistory.get();
+    int               ecolvars    = (colvarshist ? colvarshist->n_atoms : 0);
+
     CheckpointHeaderContents headerContents = { 0,
                                                 { 0 },
                                                 { 0 },
@@ -2357,7 +2402,8 @@ void write_checkpoint(const char*                   fn,
                                                 flags_dfh,
                                                 flags_awhh,
                                                 nED,
-                                                eSwapCoords };
+                                                eSwapCoords,
+                                                ecolvars };
     std::strcpy(headerContents.version, gmx_version());
     std::strcpy(headerContents.fprog, gmx::getProgramContext().fullBinaryPath());
     std::strcpy(headerContents.ftime, timebuf.c_str());
@@ -2377,6 +2423,7 @@ void write_checkpoint(const char*                   fn,
         || (do_cpt_EDstate(gmx_fio_getxdr(fp), FALSE, nED, edsamhist, nullptr) < 0)
         || (do_cpt_awh(gmx_fio_getxdr(fp), FALSE, flags_awhh, state->awhHistory.get(), nullptr) < 0)
         || (do_cpt_swapstate(gmx_fio_getxdr(fp), FALSE, eSwapCoords, swaphist, nullptr) < 0)
+        || (do_cpt_colvars(gmx_fio_getxdr(fp), FALSE, ecolvars, colvarshist, nullptr) < 0)
         || (do_cpt_files(gmx_fio_getxdr(fp), FALSE, &outputfiles, nullptr, headerContents.file_version) < 0))
     {
         gmx_file("Cannot read/write checkpoint; corrupt file, or maybe you are out of disk space?");
@@ -2802,6 +2849,17 @@ static void read_checkpoint(const char*                   fn,
         cp_error();
     }

+    if (headerContents->ecolvars != 0 && observablesHistory->colvarsHistory == nullptr)
+    {
+        observablesHistory->colvarsHistory = std::make_unique<colvarshistory_t>(colvarshistory_t{});
+    }
+    ret = do_cpt_colvars(gmx_fio_getxdr(fp), TRUE, headerContents->ecolvars,
+                           observablesHistory->colvarsHistory.get(), nullptr);
+    if (ret)
+    {
+        cp_error();
+    }
+
     std::vector<gmx_file_position_t> outputfiles;
     ret = do_cpt_files(gmx_fio_getxdr(fp), TRUE, &outputfiles, nullptr, headerContents->file_version);
     if (ret)
@@ -2957,6 +3015,13 @@ static CheckpointHeaderContents read_checkpoint_data(t_fileio*
         cp_error();
     }

+    colvarshistory_t colvarshist = {};
+    ret = do_cpt_colvars(gmx_fio_getxdr(fp), TRUE, headerContents.ecolvars, &colvarshist, nullptr);
+    if (ret)
+    {
+        cp_error();
+    }
+
     ret = do_cpt_files(gmx_fio_getxdr(fp), TRUE, outputfiles, nullptr, headerContents.file_version);

     if (ret)
@@ -3065,6 +3130,12 @@ void list_checkpoint(const char* fn, FILE* out)
         ret = do_cpt_swapstate(gmx_fio_getxdr(fp), TRUE, headerContents.eSwapCoords, &swaphist, out);
     }

+    if (ret == 0)
+    {
+        colvarshistory_t colvarshist = {};
+        ret = do_cpt_colvars(gmx_fio_getxdr(fp), TRUE, headerContents.ecolvars, &colvarshist, out);
+    }
+
     if (ret == 0)
     {
         std::vector<gmx_file_position_t> outputfiles;
diff --git a/src/gromacs/fileio/checkpoint.h b/src/gromacs/fileio/checkpoint.h
index fb8f7268be..6feb181b30 100644
--- a/src/gromacs/fileio/checkpoint.h
+++ b/src/gromacs/fileio/checkpoint.h
@@ -175,6 +175,8 @@ struct CheckpointHeaderContents
     int nED;
     //! Enum for coordinate swapping.
     int eSwapCoords;
+    //! Colvars
+    int ecolvars;
 };

 /* Write a checkpoint to <fn>.cpt
diff --git a/src/gromacs/mdlib/energyoutput.cpp b/src/gromacs/mdlib/energyoutput.cpp
index f2532f3dfe..c761958854 100644
--- a/src/gromacs/mdlib/energyoutput.cpp
+++ b/src/gromacs/mdlib/energyoutput.cpp
@@ -238,7 +238,7 @@ EnergyOutput::EnergyOutput(ener_file*               fp_ene,
     bEner_[F_DISPCORR]   = (ir->eDispCorr != edispcNO);
     bEner_[F_DISRESVIOL] = (gmx_mtop_ftype_count(mtop, F_DISRES) > 0);
     bEner_[F_ORIRESDEV]  = (gmx_mtop_ftype_count(mtop, F_ORIRES) > 0);
-    bEner_[F_COM_PULL]   = ((ir->bPull && pull_have_potential(pull_work)) || ir->bRot);
+    bEner_[F_COM_PULL]   = ((ir->bPull && pull_have_potential(pull_work)) || ir->bRot || ir->bColvars);

     MdModulesEnergyOutputToDensityFittingRequestChecker mdModulesAddOutputToDensityFittingFieldRequest;
     mdModulesNotifier.notifier_.notify(&mdModulesAddOutputToDensityFittingFieldRequest);
diff --git a/src/gromacs/mdlib/sim_util.cpp b/src/gromacs/mdlib/sim_util.cpp
index f2528d78b4..7f91cac83d 100644
--- a/src/gromacs/mdlib/sim_util.cpp
+++ b/src/gromacs/mdlib/sim_util.cpp
@@ -114,6 +114,8 @@
 #include "gromacs/utility/strconvert.h"
 #include "gromacs/utility/sysinfo.h"

+#include "colvarproxy_gromacs.h"
+
 using gmx::AtomLocality;
 using gmx::DomainLifetimeWorkload;
 using gmx::ForceOutputs;
@@ -553,6 +555,16 @@ static void computeSpecialForces(FILE*                          fplog,
      */
     if (stepWork.computeForces)
     {
+
+        /* COLVARS */
+        /* Colvars Module needs some updated data - just PBC & step number - before calling its ForceProvider */
+        if (inputrec->bColvars)
+        {
+            t_pbc pbc;
+            set_pbc(&pbc, inputrec->ePBC, box);
+            inputrec->colvars_proxy->update_data(cr, step, pbc, box, didNeighborSearch);
+        }
+
         gmx::ForceProviderInput  forceProviderInput(x, *mdatoms, t, box, *cr);
         gmx::ForceProviderOutput forceProviderOutput(forceWithVirial, enerd);

diff --git a/src/gromacs/mdrun/legacymdrunoptions.h b/src/gromacs/mdrun/legacymdrunoptions.h
index 796e479490..8b20073b3b 100644
--- a/src/gromacs/mdrun/legacymdrunoptions.h
+++ b/src/gromacs/mdrun/legacymdrunoptions.h
@@ -121,7 +121,9 @@ public:
                                           { efTOP, "-mp", "membed", ffOPTRD },
                                           { efNDX, "-mn", "membed", ffOPTRD },
                                           { efXVG, "-if", "imdforces", ffOPTWR },
-                                          { efXVG, "-swap", "swapions", ffOPTWR } } };
+                                          { efXVG, "-swap", "swapions", ffOPTWR },
+                                          { efDAT, "-colvars",  "colvars",   ffOPTRDMULT },     /* COLVARS */
+                                          { efDAT, "-colvars_restart", "colvars",  ffOPTRD },   /* COLVARS */}};

     //! Print a warning if any force is larger than this (in kJ/mol nm).
     real pforce = -1;
diff --git a/src/gromacs/mdrun/replicaexchange.cpp b/src/gromacs/mdrun/replicaexchange.cpp
index 9ff4b3817d..eb31f1fa89 100644
--- a/src/gromacs/mdrun/replicaexchange.cpp
+++ b/src/gromacs/mdrun/replicaexchange.cpp
@@ -611,6 +611,7 @@ static void exchange_state(const gmx_multisim_t* ms, int b, t_state* state)
     exchange_doubles(ms, b, &state->baros_integral, 1);
     exchange_rvecs(ms, b, state->x.rvec_array(), state->natoms);
     exchange_rvecs(ms, b, state->v.rvec_array(), state->natoms);
+    exchange_rvecs(ms, b, state->xa_old_whole_colvars, state->n_colvars_atoms);
 }

 static void copy_state_serial(const t_state* src, t_state* dest)
diff --git a/src/gromacs/mdrun/runner.cpp b/src/gromacs/mdrun/runner.cpp
index c2b3c088d7..bb38d44ab2 100644
--- a/src/gromacs/mdrun/runner.cpp
+++ b/src/gromacs/mdrun/runner.cpp
@@ -115,6 +115,7 @@
 #include "gromacs/mdtypes/md_enums.h"
 #include "gromacs/mdtypes/mdrunoptions.h"
 #include "gromacs/mdtypes/observableshistory.h"
+#include "gromacs/mdtypes/colvarshistory.h"
 #include "gromacs/mdtypes/simulation_workload.h"
 #include "gromacs/mdtypes/state.h"
 #include "gromacs/mdtypes/state_propagator_data_gpu.h"
@@ -156,6 +157,8 @@
 #include "gromacs/utility/smalloc.h"
 #include "gromacs/utility/stringutil.h"

+#include "colvarproxy_gromacs.h"
+
 #include "isimulator.h"
 #include "replicaexchange.h"
 #include "simulatorbuilder.h"
@@ -1536,6 +1539,51 @@ int Mdrunner::mdrunner()
                                MASTER(cr) ? globalState->x.rvec_array() : nullptr, filenames.size(),
                                filenames.data(), oenv, mdrunOptions.imdOptions, startingBehavior);

+        /* COLVARS */
+        if (opt2bSet("-colvars",filenames.size(), filenames.data()))
+        {
+
+            gmx::ArrayRef<const std::string> filenames_colvars;
+            std::string filename_restart;
+            std::string prefix;
+
+            inputrec->bColvars = TRUE;
+
+            /* Retrieve filenames */
+            filenames_colvars = opt2fns("-colvars", filenames.size(), filenames.data());
+            if (opt2bSet("-colvars_restart",filenames.size(), filenames.data()))
+            {
+                filename_restart = opt2fn("-colvars_restart",filenames.size(), filenames.data());
+            }
+
+            /* Determine the prefix for the colvars output files, based on the logfile name. */
+            std::string logfile = ftp2fn(efLOG, filenames.size(), filenames.data());
+            /* 4 = ".log".length() */
+            if(logfile.length() > 4)
+            {
+                prefix = logfile.substr(0,logfile.length()-4);
+            }
+
+            inputrec->colvars_proxy =  new colvarproxy_gromacs();
+            inputrec->colvars_proxy->init(inputrec,inputrec->init_step,&mtop, &observablesHistory, prefix, filenames_colvars,filename_restart, cr, MASTER(cr) ? globalState->x.rvec_array() : nullptr,
+                                          MASTER(cr) ? &globalState->xa_old_whole_colvars : nullptr, MASTER(cr) ? &globalState->n_colvars_atoms : nullptr);
+            fr->forceProviders->addForceProvider(inputrec->colvars_proxy);
+        }
+        else
+        {
+            inputrec->bColvars = FALSE;
+            if (opt2bSet("-colvars_restart",filenames.size(), filenames.data()))
+            {
+                gmx_fatal(FARGS, "-colvars_restart can only be used together with the -colvars option.");
+            }
+            if(observablesHistory.colvarsHistory) {
+                gmx_fatal(FARGS,
+                  "The checkpoint is from a run with colvars, "
+                  "but the current run did not specify the -colvars option. "
+                  "Either specify the -colvars option to mdrun, or do not use this checkpoint file.");
+            }
+        }
+
         if (DOMAINDECOMP(cr))
         {
             GMX_RELEASE_ASSERT(fr, "fr was NULL while cr->duty was DUTY_PP");
@@ -1654,6 +1702,16 @@ int Mdrunner::mdrunner()
         free_membed(membed);
     }

+    /* COLVARS */
+    if (inputrec->bColvars)
+    {
+        GMX_RELEASE_ASSERT(inputrec->colvars_proxy, "inputrec->colvars_proxy was NULL while colvars module was enabled.");
+
+        inputrec->colvars_proxy->finish(cr);
+        delete inputrec->colvars_proxy;
+        inputrec->colvars_proxy = nullptr;
+    }
+
     /* Does what it says */
     print_date_and_time(fplog, cr->nodeid, "Finished mdrun", gmx_gettime());
     walltime_accounting_destroy(walltime_accounting);
diff --git a/src/gromacs/mdtypes/colvarshistory.h b/src/gromacs/mdtypes/colvarshistory.h
new file mode 100644
index 0000000000..ea69e03419
--- /dev/null
+++ b/src/gromacs/mdtypes/colvarshistory.h
@@ -0,0 +1,20 @@
+#ifndef GMX_MDLIB_COLVARSHISTORY_H
+#define GMX_MDLIB_COLVARSHISTORY_H
+
+#include "gromacs/math/vectypes.h"
+#include "gromacs/utility/basedefinitions.h"
+
+/* Helper structure to be able to make colvars group(s) whole
+ *
+ * To also make colvars group(s) whole, we save the last whole configuration
+ * of the atoms in the checkpoint file.
+ */
+typedef struct colvarshistory_t
+{
+    gmx_bool         bFromCpt;     // Did we start from a checkpoint file?
+    int              n_atoms; // Number of colvars atoms
+    rvec*            xa_old_whole; // Last known whole positions of the colvars atoms
+    rvec*            xa_old_whole_p; // Pointer copy of xa_old_whole in colvarproxy_gromacs
+} colvarshistory_t;
+
+#endif
diff --git a/src/gromacs/mdtypes/inputrec.h b/src/gromacs/mdtypes/inputrec.h
index 266670f3ef..f1d287d35d 100644
--- a/src/gromacs/mdtypes/inputrec.h
+++ b/src/gromacs/mdtypes/inputrec.h
@@ -53,6 +53,8 @@ struct gmx_enfrot;
 struct gmx_enfrotgrp;
 struct pull_params_t;

+class colvarproxy_gromacs;
+
 namespace gmx
 {
 class Awh;
@@ -587,6 +589,10 @@ struct t_inputrec // NOLINT (clang-analyzer-optin.performance.Padding)

     //! KVT for storing simulation parameters that are not part of the mdp file.
     std::unique_ptr<gmx::KeyValueTreeObject> internalParameters;
+
+    /* COLVARS */
+    gmx_bool                bColvars = false;       /* Do we do colvars calculations ? */
+    colvarproxy_gromacs     *colvars_proxy = nullptr; /* The object for the colvars calculations */
 };

 int ir_optimal_nstcalcenergy(const t_inputrec* ir);
diff --git a/src/gromacs/mdtypes/observableshistory.cpp b/src/gromacs/mdtypes/observableshistory.cpp
index 0b5983a59c..57d851645a 100644
--- a/src/gromacs/mdtypes/observableshistory.cpp
+++ b/src/gromacs/mdtypes/observableshistory.cpp
@@ -41,6 +41,7 @@
 #include "gromacs/mdtypes/energyhistory.h"
 #include "gromacs/mdtypes/pullhistory.h"
 #include "gromacs/mdtypes/swaphistory.h"
+#include "gromacs/mdtypes/colvarshistory.h"

 ObservablesHistory::ObservablesHistory()  = default;
 ObservablesHistory::~ObservablesHistory() = default;
diff --git a/src/gromacs/mdtypes/observableshistory.h b/src/gromacs/mdtypes/observableshistory.h
index d2ba1d820f..a5747139d7 100644
--- a/src/gromacs/mdtypes/observableshistory.h
+++ b/src/gromacs/mdtypes/observableshistory.h
@@ -59,6 +59,7 @@ class energyhistory_t;
 class PullHistory;
 struct edsamhistory_t;
 struct swaphistory_t;
+struct colvarshistory_t;

 /*! \libinternal \brief Observables history, for writing/reading to/from checkpoint file
  */
@@ -76,6 +77,9 @@ struct ObservablesHistory
     //! Ion/water position swapping history
     std::unique_ptr<swaphistory_t> swapHistory;

+    //! Colvars
+    std::unique_ptr<colvarshistory_t> colvarsHistory;
+
     ObservablesHistory();

     ~ObservablesHistory();
diff --git a/src/gromacs/mdtypes/state.cpp b/src/gromacs/mdtypes/state.cpp
index a949d589a3..957f7b7139 100644
--- a/src/gromacs/mdtypes/state.cpp
+++ b/src/gromacs/mdtypes/state.cpp
@@ -240,7 +240,9 @@ t_state::t_state() :
     dfhist(nullptr),
     awhHistory(nullptr),
     ddp_count(0),
-    ddp_count_cg_gl(0)
+    ddp_count_cg_gl(0),
+    xa_old_whole_colvars(nullptr),
+    n_colvars_atoms(0)

 {
     // It would be nicer to initialize these with {} or {{0}} in the
diff --git a/src/gromacs/mdtypes/state.h b/src/gromacs/mdtypes/state.h
index a54bff29bb..8619c7935a 100644
--- a/src/gromacs/mdtypes/state.h
+++ b/src/gromacs/mdtypes/state.h
@@ -257,6 +257,10 @@ public:
     std::vector<int> cg_gl;           //!< The global cg number of the local cgs

     std::vector<double> pull_com_prev_step; //!< The COM of the previous step of each pull group
+
+    int      n_colvars_atoms; //!< number of colvars atoms
+    rvec*    xa_old_whole_colvars; //!< last whole positions of colvars atoms
+
 };

 #ifndef DOXYGEN
diff --git a/src/programs/mdrun/tests/refdata/MdrunTest_WritesHelp.xml b/src/programs/mdrun/tests/refdata/MdrunTest_WritesHelp.xml
index c2973bb1af..cb4d1da254 100644
--- a/src/programs/mdrun/tests/refdata/MdrunTest_WritesHelp.xml
+++ b/src/programs/mdrun/tests/refdata/MdrunTest_WritesHelp.xml
@@ -6,7 +6,8 @@
 gmx [-s [&lt;.tpr&gt;]] [-cpi [&lt;.cpt&gt;]] [-table [&lt;.xvg&gt;]] [-tablep [&lt;.xvg&gt;]]
     [-tableb [&lt;.xvg&gt; [...]]] [-rerun [&lt;.xtc/.trr/...&gt;]] [-ei [&lt;.edi&gt;]]
     [-multidir [&lt;dir&gt; [...]]] [-awh [&lt;.xvg&gt;]] [-membed [&lt;.dat&gt;]]
-    [-mp [&lt;.top&gt;]] [-mn [&lt;.ndx&gt;]] [-o [&lt;.trr/.cpt/...&gt;]] [-x [&lt;.xtc/.tng&gt;]]
+    [-mp [&lt;.top&gt;]] [-mn [&lt;.ndx&gt;]] [-colvars [&lt;.dat&gt; [...]]]
+    [-colvars_restart [&lt;.dat&gt;]] [-o [&lt;.trr/.cpt/...&gt;]] [-x [&lt;.xtc/.tng&gt;]]
     [-cpo [&lt;.cpt&gt;]] [-c [&lt;.gro/.g96/...&gt;]] [-e [&lt;.edr&gt;]] [-g [&lt;.log&gt;]]
     [-dhdl [&lt;.xvg&gt;]] [-field [&lt;.xvg&gt;]] [-tpi [&lt;.xvg&gt;]] [-tpid [&lt;.xvg&gt;]]
     [-eo [&lt;.xvg&gt;]] [-px [&lt;.xvg&gt;]] [-pf [&lt;.xvg&gt;]] [-ro [&lt;.xvg&gt;]]
@@ -163,6 +164,10 @@ Options to specify input files:
            Topology file
  -mn     [&lt;.ndx&gt;]           (membed.ndx)     (Opt.)
            Index file
+ -colvars [&lt;.dat&gt; [...]]    (colvars.dat)    (Opt.)
+           Generic data file
+ -colvars_restart [&lt;.dat&gt;]  (colvars.dat)    (Opt.)
+           Generic data file

 Options to specify output files:

