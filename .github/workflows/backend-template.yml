# Reusable workflow meant to be called keyword by another workflow with the `use`
# It generalize the test procedure to be applied by a generic MD engine

# This workflow:
#  - Checkout Colvars code
#  - Checkout the MD engine
#  - Build the MD engine in a container
#  - Run the Colvars regression tests written for the MD engine

name: "Test a backend with Colvars"

on:
  workflow_call:
    # Variables needed by the template
    inputs:
      backend_name:
        description: "Name of the backend"
        required: true
        type: string
      backend_repo:
        description: "Name of the backend repository"
        required: true
        type: string
      backend_repo_ref:
        description: "Name of the branch of the backend repository"
        required: true
        type: string
      container_name:
        description: "Name of the container used to build on"
        required: true
        type: string
      vmd_plugins_repo:
        description: "Name of the VMD plugins repository"
        required: false
        type: string
      path_compile_script:
        description: "Path of the compilation script of the backend"
        required: true
        type: string
      # At least one of test_lib_directory or test_interface_directory need
      # to be set to launch the regression tests.
      test_lib_directory:
        description: "Path of the library test directory"
        required: false
        type: string
      test_interface_directory:
        description: "Path of the interface test directory"
        required: false
        type: string
      rpath_exe:
        description: "Relative path of the compiled executable"
        required: true
        type: string
    secrets:
      private_key:
         description: "secret key to access the private repository"
         required: false
      private_key_vmd_plugins:
         description: "secret key to access the VMD plugins private repository"
         required: false

jobs:
  test_backends:
    runs-on: ubuntu-latest
    env:
      CCACHE_DIR: ~/ccache_${{ inputs.container_name }}
      # OpenMPI transport settings suitable for GH VMs
      OMPI_MCA_mtl: "^ofi"
      OMPI_MCA_btl: "vader,self"

    steps:
      - name: Checkout Colvars
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Load compiler cache
        uses: actions/cache@v3
        with:
          path: |
            ~/ccache_${{ inputs.container_name }}
          key: ${{ runner.os }}-build-${{ inputs.backend_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.backend_name }}-

      - name: Checkout OpenMM (for Lepton library)
        uses: actions/checkout@v4
        with:
          repository: 'openmm/openmm'
          ref: 'master'
          path: 'openmm-source'

      - name: Checkout ${{ inputs.backend_name }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.backend_repo }}
          ref: ${{ inputs.backend_repo_ref }}
          path: '${{ inputs.backend_name }}-source'
          ssh-key: ${{ secrets.private_key }}

      # Only used for VMD test case
      - name: Checkout VMD plugins
        if: ${{ inputs.backend_name == 'VMD' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.vmd_plugins_repo }}
          ref: master
          path: 'vmd-plugins-source'
          ssh-key: ${{ secrets.private_key_vmd_plugins }}

      - name: Get small downloadable packages
        uses: actions/checkout@v4
        with:
          repository: 'Colvars/build-tools-packages'
          ref: 'master'
          path: 'devel-tools/packages'

      - name: Install Apptainer
        shell: bash
        run: |
          sudo add-apt-repository -y ppa:apptainer/ppa
          sudo apt update
          sudo apt install -y apptainer-suid

      - name: Get container images for build dependencies
        shell: bash
        working-directory: devel-tools
        run: |
          apptainer pull ${{ inputs.container_name }}.sif oras://ghcr.io/colvars/devel-containers:${{ inputs.container_name }}

      - name: Update and build ${{ inputs.backend_name }}
        shell: bash
        env:
          OPENMM_SOURCE: ${{ github.workspace }}/openmm-source
          CMAKE_GENERATOR: Ninja
        run: |
          apptainer exec devel-tools/${{ inputs.container_name }}.sif \
              ./update-colvars-code.sh -f ${{ inputs.backend_name }}-source
          mkdir -p ${CCACHE_DIR}
          apptainer exec devel-tools/${{ inputs.container_name }}.sif \
              bash ${{ inputs.path_compile_script }} ${{ inputs.backend_name }}-source


      # 2 types of tests can be performed with the MD engine: library & interface
      # It depends on the working directory
      # Note to be run, test_lib_directory or test_interface_directory must be set by the caller workflow

      - name: Run regression tests for library code with ${{ inputs.backend_name }}
        if: ${{ inputs.test_lib_directory }}
        shell: bash
        working-directory: ${{ inputs.test_lib_directory }}
        env:
          VMDNORLWRAP: 1
        run: |
          apptainer exec ${{github.workspace}}/devel-tools/${{ inputs.container_name }}.sif \
          ./run_tests.sh ${{github.workspace}}/${{ inputs.backend_name }}-source/${{ inputs.rpath_exe }} 0??_*

      - name: Save failed library test artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: failed-library-test-diffs-${{ inputs.backend_name }}
          path: ${{ github.workspace }}/${{ inputs.test_lib_directory }}/*/*.diff

      - name: Run regression tests for ${{ inputs.backend_name }} interface code
        if: ${{ inputs.test_interface_directory }}
        shell: bash
        working-directory: ${{ inputs.test_interface_directory }}
        env:
          VMDNORLWRAP: 1
        run: |
          apptainer exec ${{github.workspace}}/devel-tools/${{ inputs.container_name }}.sif \
          ./run_tests.sh ${{github.workspace}}/${{ inputs.backend_name }}-source/${{ inputs.rpath_exe }}

      - name: Save failed interface test artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: failed-interface-test-diffs-${{ inputs.backend_name }}
          path: ${{ github.workspace }}/${{ inputs.test_interface_directory }}/*/*.diff

      - name: Run regression tests for library code with ${{ inputs.backend_name }} (binary restarts)
        # Skipping GROMACS, because its restarts are always binary anyway
        if: inputs.test_lib_directory != '' && inputs.backend_name != 'GROMACS-main'
        shell: bash
        working-directory: ${{ inputs.test_lib_directory }}
        env:
          COLVARS_BINARY_RESTART: 1
        run: |
          apptainer exec ${{github.workspace}}/devel-tools/${{ inputs.container_name }}.sif \
          ./run_tests.sh ${{github.workspace}}/${{ inputs.backend_name }}-source/${{ inputs.rpath_exe }} 0??_*

      - name: Keep only one cache besides the one from this job
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          bash ${{ github.workspace }}/devel-tools/cleanup-gh-cache.sh ${{ runner.os }}-build-${{ inputs.backend_name }}-
