# Reusable workflow meant to be called keyword by another workflow with the `use`
# It generalize the test procedure to be applied by a generic MD engine

# This workflow:
#  - Checkout Colvars code
#  - Checkout the MD engine
#  - Build the MD engine with Singularity
#  - Run the Colvars regression tests written for the MD engine

name: "Test a backend with Colvars"

on:
  workflow_call:
    # Variables needed by the template
    inputs:
      backend_name:
        description: "Name of the backend"
        required: true
        type: string
      backend_repo:
        description: "Name of the backend repository"
        required: true
        type: string
      backend_repo_ref:
        description: "Name of the branch of the backend repository"
        required: true
        type: string
      vmd_plugins_repo:
        description: "Name of the VMD plugins repository"
        required: false
        type: string
      path_compile_script:
        description: "Path of the compilation script of the backend"
        required: true
        type: string
      # At least one of test_lib_directory or test_interface_directory need
      # to be set to launch the regression tests.
      test_lib_directory:
        description: "Path of the library test directory"
        required: false
        type: string
      test_interface_directory:
        description: "Path of the interface test directory"
        required: false
        type: string
      rpath_exe:
        description: "Relative path of the compiled executable"
        required: true
        type: string
    secrets:
      private_key:
         description: "secret key to access the private repository"
         required: false
      private_key_vmd_plugins:
         description: "secret key to access the VMD plugins private repository"
         required: false

jobs:
  test_backends:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Colvars
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Load compiler cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.ccache
            ~/ccache_CentOS7-devel
          key: ${{ runner.os }}-build-${{ inputs.backend_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.backend_name }}-

      # Using an exact key to forgo saving it in case of a match (tarring up
      # is expensive); also including a date to allow a force-update.
      - name: Load Singularity containers cache
        uses: actions/cache@v2
        with:
          path: ~/.singularity
          key: Linux-x86_64-containers-build-2022-03-03

      - name: Checkout OpenMM (for Lepton library)
        uses: actions/checkout@v2
        with:
          repository: 'openmm/openmm'
          ref: 'master'
          path: 'openmm-source'

      - name: Checkout ${{ inputs.backend_name }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.backend_repo }}
          ref: ${{ inputs.backend_repo_ref }}
          path: '${{ inputs.backend_name }}-source'
          ssh-key: ${{ secrets.private_key }}

      # Only used for VMD test case
      - name: Checkout VMD plugins
        if: ${{ inputs.backend_name == 'VMD' }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.vmd_plugins_repo }}
          ref: master
          path: 'vmd-plugins-source'
          ssh-key: ${{ secrets.private_key_vmd_plugins }}

      - name: Get small downloadable packages
        uses: actions/checkout@v2
        with:
          repository: 'Colvars/build-tools-packages'
          ref: 'master'
          path: 'devel-tools/packages'

      - name: Install Singularity
        shell: bash
        working-directory: devel-tools/packages
        run: |
          sudo apt-get -y install squashfs-tools containernetworking-plugins
          sudo dpkg -i singularity_3.8.5-2_amd64.deb

      - name: Get container image of backends' dependencies
        shell: bash
        working-directory: devel-tools
        run: |
          # Pull CentOS 7 container used to build backends
          # (contains build tools, OpenMPI, FFTW, Tcl/Tk and Charm++)
          singularity pull CentOS7-devel.sif library://giacomofiorin/default/colvars_development:centos7

      - name : Get spiff
        shell: bash
        working-directory: devel-tools
        run: sudo cp -f $(singularity exec CentOS7-devel.sif ./get_spiff) /usr/local/bin

      - name: Update and build ${{ inputs.backend_name }}
        shell: bash
        env:
          OPENMM_SOURCE: ${{ github.workspace }}/openmm-source
        run: |
          singularity exec devel-tools/CentOS7-devel.sif ./update-colvars-code.sh -f ${{ inputs.backend_name }}-source
          CCACHE_DIR=~/ccache_CentOS7-devel \
          singularity exec devel-tools/CentOS7-devel.sif \
          bash ${{ inputs.path_compile_script }} ${{ inputs.backend_name }}-source


      # 2 types of tests can be performed with the MD engine: library & interface
      # It depends on the working directory
      # Note to be run, test_lib_directory or test_interface_directory must be set by the caller workflow

      - name: Run regression tests for library code with ${{ inputs.backend_name }}
        if: ${{ inputs.test_lib_directory }}
        shell: bash
        working-directory: ${{ inputs.test_lib_directory }}
        run: |
          singularity exec ${{github.workspace}}/devel-tools/CentOS7-devel.sif \
          ./run_tests.sh ${{github.workspace}}/${{ inputs.backend_name }}-source/${{ inputs.rpath_exe }} 0??_*

      - name: Run regression tests for ${{ inputs.backend_name }} interface code
        if: ${{ inputs.test_interface_directory }}
        shell: bash
        working-directory: ${{ inputs.test_interface_directory }}
        run: |
          singularity exec ${{github.workspace}}/devel-tools/CentOS7-devel.sif \
          ./run_tests.sh ${{github.workspace}}/${{ inputs.backend_name }}-source/${{ inputs.rpath_exe }}
